index.html


<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Meta tags for character set and viewport -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Bootstrap CSS from CDN -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <!-- Custom CSS inline -->
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            text-align: center;
            padding: 20px;
        }

        h1 {
            color: #007bff; /* Bootstrap primary color */
        }

        form {
            margin: 10px auto;
            max-width: 400px;
        }

        /* Add a bit more styling to buttons */
        button {
            margin-top: 10px;
        }

        /* Style for the response div */
        #response {
            margin-top: 20px;
            font-weight: bold;
            color: #28a745; /* Bootstrap success color */
        }
    </style>

    <!-- Title of the page -->
    <title>Audio Processing App</title>
</head>

<body class="container mt-3">

    <!-- Bootstrap Jumbotron for a prominent heading -->
    <div class="jumbotron text-center">
        <h1 class="display-4">Audio Processing App</h1>
    </div>

    <!-- Form for user login -->
    <div id="loginSection">
        
        <form class="mb-3" id="loginForm">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" class="form-control" id="username" required>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" required>
            </div>
            <button type="button" class="btn btn-primary" onclick="login()">Login</button>
        </form>
    </div>


    <!-- Form for API key submission -->
    <div id="apiKeySection" style="display:none;">
        <form class="mb-3" id="apiKeyForm">
            <div class="form-group">
                <label for="apiKey">API Key:</label>
                <input type="text" class="form-control" id="apiKey" required>
            </div>
            <button type="button" class="btn btn-primary" onclick="authenticate()">Submit</button>
        </form>
    </div>    

    <div id="contentSection" style="display:none;">

        <form class="mb-3" id="uploadForm"> <!-- Form for uploading audio files -->
            <div class="form-group">
                <label for="audioFile">Upload Audio File:</label>
                <input type="file" class="form-control" id="audioFile" accept=".wav, .mp3" required>
            </div>
            <button type="button" class="btn btn-primary" onclick="AudioUpload()">Upload</button>
        </form>

        <form class="mb-3" id="adjustVolumeForm"> <!-- Form for adjusting audio volume -->
            <div class="form-group">
                <label for="volumeLevel">Adjust Volume (dBFS):</label>
                <input type="number" class="form-control" id="volumeLevel" required>
                <button type="button" class="btn btn-warning" onclick="AdjustVolume('increase')">Increase</button>
                <button type="button" class="btn btn-warning" onclick="AdjustVolume('decrease')">Decrease</button>
            </div>
        </form>

        <!-- Button for downloading audio -->
        <button class="btn btn-success mb-3" onclick="AudioDownload()">Download Audio</button>
    </div>
    
    <!-- Logout button -->
    <button id="logoutButton" class="btn btn-outline-secondary float-right" style="display:none;" onclick="logout()">Logout</button>

    <!-- Container for displaying responses or messages -->
    <div id="response"></div>

    <!-- Bootstrap and other required JavaScript libraries from CDNs -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXhZ8Af8fd2GOi8m5VWqMSqP9T/aIq5JSdG" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>


    <!-- JavaScript inline Starts from here-->
    <script>


       // Function to handle the initial login
        function login() {
            var username = document.getElementById('username').value;
            var password = document.getElementById('password').value;

            // Send login credentials to the backend for authentication
            fetch('/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: username, password: password }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('apiKey').value = '';
                    // Hide the login and API key input sections after successful login
                    document.getElementById('loginSection').style.display = 'none';
                    document.getElementById('apiKeySection').style.display = 'block';// Show content section
                    document.getElementById('contentSection').style.display = 'none'; 
                    document.getElementById('logoutButton').style.display = 'block';

                    // Check if an API key is provided in the response
                    if (data.apiKey) {
                        // Display the API key message
                        //alert(data.message);
                        document.getElementById('response').innerHTML = data.message;

                        // Call authenticate function with the username
                        //authenticate(username);
                    } else {
                        // Display a general success message
                        document.getElementById('response').innerHTML = data.message;
                    }
                } else {
                    // Display an error message for unsuccessful login
                    alert('Invalid username, or password. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error during login:', error);
                alert('An error occurred during login. Please try again.');
            });
        }



        // Function to handle user logout
        function logout() {
            // Reset the page to its initial state with the login section visible
            document.getElementById('loginSection').style.display = 'block';
            document.getElementById('apiKeySection').style.display = 'none';
            document.getElementById('contentSection').style.display = 'none';
            document.getElementById('logoutButton').style.display = 'none';

            // Clear the username and password fields
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
            

            // Clear any response or message displayed
            document.getElementById('response').innerHTML = '';
        }


        
        // Function to handle both API key authentication
        function authenticate() {
            // Get the entered API key from the input field
            var apiKey = document.getElementById('apiKey').value;
            //var username = document.getElementById('username').value;

            // Send a request to the backend for API key authentication
            fetch('/authenticate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: 'admin', apiKey: apiKey }),
            })
            .then(response => response.json())
            .then(data => {
                // Check if API key authentication is successful
                if (data.success) {
                    // If authentication is successful, proceed with the file upload
                    document.getElementById('loginSection').style.display = 'none';
                    document.getElementById('apiKeySection').style.display = 'none'; // Hide API key input
                    document.getElementById('contentSection').style.display = 'block'; // Show upload section
                    document.getElementById('logoutButton').style.display = 'block';
                } else {
                    // Display an error message for unsuccessful authentication
                    document.getElementById('response').innerHTML = 'Invalid API key. Please try again.';
                }
            })
            .catch(error => {
                // Handle errors that may occur during the authentication process
                console.error('Error during authentication:', error);
                document.getElementById('response').innerHTML = 'An error occurred during authentication. Please try again.';
            });
        }




        // Function to handle audio file upload
        function AudioUpload() {
            var formData = new FormData();
            var fileInput = document.getElementById('audioFile');

            if (fileInput.files.length > 0) {
                formData.append('file', fileInput.files[0]);

                fetch('/upload', {
                    method: 'POST',
                    body: formData,
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        // Handle error case
                        document.getElementById('response').innerHTML = 'Error uploading audio file: ' + data.error;
                    } else {
                        // Handle success case
                        document.getElementById('response').innerHTML = data.message;
                    }
                })
                .catch(error => {
                    console.error('Error uploading audio file:', error);
                    document.getElementById('response').innerHTML = 'Error uploading audio file.';
                });
            } else {
                document.getElementById('response').innerHTML = 'Please select an audio file.';
            }
        }





        // Function to handle audio volume adjustment
        function AdjustVolume(action) {
            var volumeLevelInput = document.getElementById('volumeLevel');
            var volumeLevel = parseFloat(volumeLevelInput.value);

            if (!isNaN(volumeLevel)) {

                // Adjust action based on user's choice (increase or decrease)
                volumeLevel = (action === 'increase') ? volumeLevel : -volumeLevel;
                
                fetch('/adjust', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ volumeLevel: volumeLevel }),
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('response').innerHTML = data.message;
                })
                .catch(error => {
                    console.error('Error adjusting audio:', error);
                    document.getElementById('response').innerHTML = 'Error adjusting audio.';
                });
            } else {
                document.getElementById('response').innerHTML = 'Please enter a valid volume level.';
            }
        }


        
        // Function to handle audio download
        function AudioDownload() {
            fetch('/download', {
                method: 'GET',
            })
            .then(response => response.blob())
            .then(blob => {
                // Create a temporary anchor element
                var a = document.createElement('a');
                var url = window.URL.createObjectURL(blob);

                // Set the download attribute and trigger a click to download the file
                a.href = url;
                a.download = 'adjusted_audio.wav';  // Change the file name as needed
                document.body.appendChild(a);
                a.click();

                // Cleanup
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            })
            .catch(error => {
                console.error('Error downloading audio:', error);
                document.getElementById('response').innerHTML = 'Error downloading audio.';
            });
        }
        

    </script>

</body>
</html>




-----------------------------------------------------------------------------------------------------

app.py


from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from pydub import AudioSegment
from flask import send_file
from flask import jsonify
import io
import os
import pydub
import secrets  # Import the secrets module for generating secure API keys


app = Flask(__name__)
CORS(app)

# In-memory storage for uploaded audio files
audio_storage = {}  
user_api_keys = {} # Store user API keys
new_api_key = None  # Initialization of new_api_key



# Set the path to the FFmpeg executable
#FFMPEG_PATH = r'C:\Users\z004tu0x\AppData\Local\Programs\Python\Python311\Lib\ffmpeg\bin\'
#pydub.AudioSegment.converter = FFMPEG_PATH

#AudioSegment.converter = FFMPEG_PATH


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/login', methods=['POST'])
def login():
    global new_api_key
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    # Perform your authentication logic here
    if username == 'admin' and password == 'admin':
        # Check if the user already has an API key
        if username in user_api_keys:
            return jsonify({'success': True, 'message': 'Use your existing API key.', 'apiKey': None}), 200
        else:
            # Generate a new API key for the user
            new_api_key = secrets.token_urlsafe(32)
            user_api_keys[username] = new_api_key
            print(f"New API key generated for user {username}: {new_api_key}")
            return jsonify({'success': True, 'message': 'Your API key is: {}'.format(new_api_key), 'apiKey': new_api_key}), 200
    else:
        return jsonify({'success': False}), 401
    

    
@app.route('/authenticate', methods=['POST'])
def authenticate():
    data = request.get_json()
    username = data.get('username')  # Assuming the username is sent from the frontend
    entered_api_key = data.get('apiKey')

    # Check if the user exists and the entered API key is correct
    if username in user_api_keys and user_api_keys[username] == entered_api_key:
        return jsonify({'success': True}), 200
    else:
        return jsonify({'success': False}), 401


@app.route('/upload', methods=['POST'])
def upload_audio():
    # Check if the 'file' key is in the request.files dictionary
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    file = request.files['file']

    # Check if the file is not empty
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    # Save the uploaded file to the in-memory storage
    if file:
        audio_content = file.read()
        #print(audio_content)

        # Print the volume of the uploaded audio
        initial_audio = AudioSegment.from_file(io.BytesIO(audio_content), format='mp3')
        print(f"Initial Volume: {initial_audio.dBFS} dBFS")

        audio_storage[file.filename] = audio_content
        return jsonify({'message': 'File uploaded successfully'}), 200



@app.route('/adjust', methods=['POST'])
def adjust_audio():
    # Get the desired volume level from the request JSON
    data = request.get_json()
    volume_level = data.get('volumeLevel')

    # Check if the volume level is valid
    if volume_level is None or not isinstance(volume_level, (int, float)):
        return jsonify({'error': 'Invalid volume level'}), 400

    # Get the latest uploaded audio file from audio_storage
    latest_audio_file = max(audio_storage.keys(), key=lambda x: audio_storage[x])

    # Retrieve the audio content of the latest uploaded file
    audio_content = audio_storage.get(latest_audio_file)

    # Check if the audio content is available
    if audio_content is None:
        return jsonify({'error': 'Audio file not found'}), 404

    # Implement your audio adjustment logic here
    # This is a placeholder, you need to replace it with your actual audio processing code
    adjusted_audio_content = adjust_audio_volume(audio_content, volume_level)

    # Update the audio content in the storage with the adjusted content
    audio_storage[latest_audio_file] = adjusted_audio_content


    return jsonify({'message': 'Audio adjusted successfully'}), 200

    #audio = AudioSegment.from_mp3(file_path)

def adjust_audio_volume(audio_content, volume_level):
    audio = AudioSegment.from_file(io.BytesIO(audio_content), format='mp3')
    adjusted_audio = audio + volume_level
    
    print(f"Adjusted Volume: {adjusted_audio.dBFS} dBFS")
    # Export the adjusted audio as WAV
    adjusted_audio_content = adjusted_audio.export(format='mp3').read()
    
    return adjusted_audio_content



@app.route('/download', methods=['GET'])
def download_audio():
    # Check if there are no audio files uploaded
    if not audio_storage:
        return jsonify({'error': 'No audio files available for download'}), 404

    # Get the latest uploaded audio file from audio_storage
    latest_audio_file = max(audio_storage.keys(), default=None, key=lambda x: audio_storage[x])

    # Check if the audio content is available
    adjusted_audio_content = audio_storage.get(latest_audio_file)
    if adjusted_audio_content is None:
        return jsonify({'error': 'Audio file not found'}), 404

    # Provide the adjusted audio for download
    response = send_file(
        io.BytesIO(adjusted_audio_content),
        as_attachment=True,
        download_name='adjusted_new_audio.mp3',  # Change the file name as needed
        mimetype='audio/mp3',  # Change the mimetype based on the actual audio format
    )

    return response



if __name__ == "__main__":
    #app.run(debug=True)
    app.run(debug=True, host='0.0.0.0', port=80)


------------------------------------------------------------------------------------------------------------

requirements.txt

Flask>=2.0.1,<3.0.0
Flask-CORS>=3.0.10,<4.0.0
pydub>=0.25.1,<1.0.0

------------------------------------------------------------------------------------------------------------

openapi.yaml


swagger: '2.0'
info:
  title: Audio Processing API
  description: >
    To use this as API documentation, Open website and copy & paste this code to console: 

    - https://app.apiary.io/audioprocessingapi/editor 

    - https://editor.swagger.io/

    - https://editor-next.swagger.io/


    The Audio Processing API provides a flexible and powerful solution for audio file manipulation,specializing in volume adjustment. It allows users to upload, adjust, and download audio fileseffortlessly. The API leverages the Flask framework and PyDub library to handle requests and performaudio processing tasks, ensuring a seamless and efficient user experience.

    Key Features:

    - User Authentication: Securely generate and manage API keys for user authentication.

    - File Upload: Easily upload audio files in various formats for processing.

    - Volume Adjustment: Dynamically adjust the volume of the latest uploaded audio file.

    - Download: Retrieve the processed audio file with the desired volume level.


    How it Works:

    1. Authentication: Users can log in to obtain a unique API key for secure access.

    2. File Upload: Upload audio files through the '/upload' endpoint using a user's API key.

    3. Volume Adjustment: Adjust the volume of the latest uploaded audio via the '/adjust' endpoint.

    4. Download: Retrieve the adjusted audio file using the '/download' endpoint.


    This API is designed for simplicity and ease of integration, making it suitable for a wide range of audio
    processing applications. Explore the provided endpoints to seamlessly incorporate audio processing into
    your projects.
  contact:
    email: apiteam@swagger.io
  version: '1.0'

schemes:
  - http
  - https
host: localhost:5000

paths:
  /login:
    post:
      summary: Authenticate User and Obtain API Key
      description: >
        This endpoint handles user authentication, allowing users to securely log in and obtain an API keyfor accessing protected resources. Users need to provide their username and password in the request body.


        If authentication is successful, a unique API key is generated for the user.


        `Note`: If the user already has an API key, the response will indicate the existing key, and a new one
        will not be generated.

      consumes:
        - application/json
      parameters:
        - name: username
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
        - name: apiKey
          in: header
          type: string
          required: false
      responses:
        '200':
          description: Successful login
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              apiKey:
                type: string
        '401':
          description: Unauthorized access, which defines the user details are not available.

  /authenticate:
    post:
      summary: Authenticate user with API key
      description: |
        This endpoint is used to authenticate a user by verifying the provided API key. Users must include their username and API key in the request body. 
        
        A successful authentication will return a 200 status and connects to upload audio section, while an unauthorized attempt will result in a 401 status which defines of Enter a valid API key.

        Ensure that users provide accurate and valid API keys generated during the login process to access protected resources within the Audio Processing API.
      consumes:
        - application/json
      parameters:
        - name: username
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              apiKey:
                type: string
      responses:
        '200':
          description: Successful authentication
          schema:
            type: object
            properties:
              success:
                type: boolean
        '401':
          description: Unauthorized access, To enter a valid API key.


  /upload:
    post:
      summary: Upload an audio file
      description: |
        This endpoint allows users to upload an audio file for processing. The request must be formatted as `multipart/form-data`, and the audio file should be included in the 'file' field.

        Upon receiving the audio upload request, the server checks if the uploaded file is empty. If the file is empty, a 400 Bad Request response is returned with an error message. Otherwise, the server processes the audio file and responds with a 200 status and a message confirming the successful upload.

        Ensure that the uploaded audio files comply with the supported formats and specifications for seamless processing by the Audio Processing API.
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          type: file
          required: true
      responses:
        '200':
          description: Successful upload
          schema:
            type: object
            properties:
              message:
                type: string
                example: File uploaded successfully
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              error:
                type: string
                example: No selected file or empty file



  /adjust:
    post:
      summary: Adjust the volume of the latest uploaded audio file
      description: |
        This endpoint allows users to adjust the volume of the most recently uploaded audio file. 
        Users should provide the desired volume level as a numeric value in the request body.
        Once the value is entered, user should choose to increase or decrease buttons which does the action for the uploaded audio.
        The adjusted audio will replace the original file in the server's in-memory storage.

      consumes:
        - application/json

      parameters:
        - name: volumeLevel
          in: body
          required: true
          schema:
            type: object
            properties:
              volumeLevel:
                type: number
          description: The desired volume level for audio adjustment.

      responses:
        '200':
          description: Successful volume adjustment
          schema:
            type: object
            properties:
              message:
                type: string
                example: Audio adjusted successfully
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid volume level
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              error:
                type: string
                example: Audio file not found


  /download:
    get:
      summary: Download the adjusted audio file
      description: |
        This endpoint allows users to download the most recently adjusted audio file.
        The server will respond with the adjusted audio file in the specified format.
        Users can expect the file to be in the MP3 format by default.

      produces:
        - application/octet-stream

      parameters:
        - name: filename
          in: query
          description: The name of the file to download
          required: true
          type: string

      responses:
        '200':
          description: Successful download
          headers:
            Content-Disposition:
              type: string
              description: Specifies the file name for download

          # It indicates that the response body is of type string with a binary format
          schema:
            type: string
            format: binary

# Summary: Definition of API key security for authentication
securityDefinitions:
  apiKey:
    type: apiKey
    name: X-API-Key
    in: header
security:
  - apiKey: []

# Summary: Defines of a standard error response structure
definitions:
  ErrorResponse:
    type: object
    properties:
      invalidAPIKey:
        type: string
        example: "Invalid API key. Please provide a valid API key for authentication."

      unauthorizedAccess:
        type: string
        example: "Unauthorized access. Please provide a valid API key."

      fileNotFound:
        type: string
        example: "Audio file not found. Please make sure the file exists and try again."

      invalidVolumeLevel:
        type: string
        example: "Invalid volume level. Please provide a numeric value for volume adjustment."

      noSelectedFile:
        type: string
        example: "No selected file for upload. Please choose a file and try again."

--------------------------------------------------------------------------------------------------------------
test_app.py


import unittest
from flask import json
from app import app
import io
import os

class AppTestCase(unittest.TestCase):
    def setUp(self):
        # Create a test client
        self.app = app.test_client()

    def test_login_success(self):
        # Test the login route with correct credentials
        response = self.app.post('/login', json={'username': 'admin', 'password': 'admin'})
        data = response.get_json()
        self.assertEqual(response.status_code, 200)
        self.assertTrue(data['success'])
        self.assertIn('apiKey', data)

    def test_login_failure(self):
        # Test the login route with incorrect credentials
        response = self.app.post('/login', json={'username': 'admin', 'password': 'Admin'})
        self.assertEqual(response.status_code, 401)
        # Print or log the response content for further inspection
        print(response.get_data(as_text=True))


    def test_adjust_audio(self):
        # Get the current script's directory
        script_directory = os.path.dirname(os.path.realpath(__file__))

        # Construct the full path to the audio file
        audio_file_path = os.path.join(script_directory, "adjusted_new_audio.mp3")

        # Read the content of the MP3 file
        with open(audio_file_path, "rb") as audio_file:
            small_audio_content = audio_file.read()

        # Upload the small audio file
        self.app.post('/upload', data={'file': (io.BytesIO(small_audio_content), 'test.mp3')})

        # Test the adjust audio route with volume adjustment
        response = self.app.post('/adjust', json={'volumeLevel': 3})
        data = response.get_json()
        self.assertEqual(response.status_code, 200)
        self.assertIn('message', data)





if __name__ == '__main__':
    unittest.main()





--------------------------------------------------------------------------------------------------------------